class EatAndRunBot {
  constructor() {
    this.isActive = false;
    this.gameState = {
      players: [],
      food: [],
      bombs: [],
      myPlayer: null
    };
    this.settings = {
      aggressiveness: 70, // –£—Ä–æ–≤–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ (0-100, 0 - –ø–∞—Å—Å–∏–≤–Ω—ã–π, 100 - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π)
      avoidDistance: 150, // –î–∏—Å—Ç–∞–Ω—Ü–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±–æ—Ç –±—É–¥–µ—Ç –∏–∑–±–µ–≥–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤
      reactionSpeed: 5, // –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏ –±–æ—Ç–∞ (1-10, 1 - –º–µ–¥–ª–µ–Ω–Ω–æ, 10 - –±—ã—Å—Ç—Ä–æ)
      attackDistance: 1000 // –î–∏—Å—Ç–∞–Ω—Ü–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±–æ—Ç –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –∞—Ç–∞–∫–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤  
    };
    this.originalWebSocket = null;
    this.gameWebSocket = null;
    this.lastMove = { x: 0, y: 0 };
    this.decisionInterval = null;
    this.lastDecisionTime = 0;
    this.currentUserId = null;

    this.handleWebSocketMessage = this.handleWebSocketMessage.bind(this);

    this.initializeWebSocketInterception();
  }

  initializeWebSocketInterception() {
    const self = this;

    window.addEventListener('message', (event) => {
      if (event.source !== window || !event.data) return;
      if (event.data.type === 'WS_CREATED') {
        console.log('üîç WebSocket —Å–æ–∑–¥–∞–Ω:', event.data.payload.url);
        self.currentUserId = event.data.payload.url.match(/id=([0-9a-fA-F-]{36})/)[1];
      }
      if (event.data.type === 'WS_MESSAGE') {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç WebSocket  ;
        this.handleWebSocketMessage({ data: event.data.payload })
      }
    });

  }

  handleWebSocketMessage(event) {
    if (!this.isActive) return;

    try {
      const data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;
      if (data.type === 'gameUpdate') {
        this.updateGameState(data);
        this.makeDecision();
      } else if (data.type === 'gameOver') {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        setTimeout(() => {
           window.postMessage({ type: "WS_CLOSE_MESSAGE" }, "*");
        }, 3000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
    }
  }

  updateGameState(data) {
    console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã:', data);
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (data.players) {
      this.gameState.players = data.players;
      // –ù–∞—Ö–æ–¥–∏–º —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞
      this.gameState.myPlayer = data.players.find(p => p.id === this.currentUserId);
    }

    if (data.food) {
      this.gameState.food = data.food;
    }

    if (data.bombs) {
      this.gameState.bombs = data.bombs;
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
    // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø–æ–ª–µ–º payload
    if (data.type === 'gameUpdate') {
      this.gameState = { ...this.gameState, ...data.payload };
    }
  }

  makeDecision() {
    const now = Date.now();
    const reactionDelay = (11 - this.settings.reactionSpeed) * 10; // 10-100ms –∑–∞–¥–µ—Ä–∂–∫–∞

    if (now - this.lastDecisionTime < reactionDelay) {
      return;
    }

    this.lastDecisionTime = now;

    if (!this.gameState.myPlayer) return;

    const myPlayer = this.gameState.myPlayer;
    const threats = this.findThreats(myPlayer);
    const opportunities = this.findOpportunities(myPlayer);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:
    // 1. –ò–∑–±–µ–≥–∞–Ω–∏–µ —É–≥—Ä–æ–∑
    // 2. –ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π (—Å—ä–µ—Å—Ç—å –º–µ–Ω—å—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞)
    // 3. –°–±–æ—Ä –µ–¥—ã
    // –ï—Å–ª–∏ –Ω–µ—Ç —É–≥—Ä–æ–∑ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –ø—Ä–æ—Å—Ç–æ —Å–æ–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é –µ–¥—É
    let targetX = 0;
    let targetY = 0;

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –ò–∑–±–µ–≥–∞–Ω–∏–µ —É–≥—Ä–æ–∑
    if (threats.length > 0) {
      const avoidanceVector = this.calculateAvoidanceVector(myPlayer, threats);
      targetX = avoidanceVector.x;
      targetY = avoidanceVector.y;
    }
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    else if (opportunities.length > 0) {
      const opportunity = this.selectBestOpportunity(myPlayer, opportunities);
      const direction = this.calculateDirection(myPlayer, opportunity);
      targetX = direction.x;
      targetY = direction.y;
    }
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: –°–±–æ—Ä –µ–¥—ã
    else {
      const nearestFood = this.findNearestFood(myPlayer);
      if (nearestFood) {
        const direction = this.calculateDirection(myPlayer, nearestFood);
        targetX = direction.x;
        targetY = direction.y;
      }
    }

    this.sendMove(targetX, targetY);
  }

  findThreats(myPlayer) {
    const threats = [...this.gameState.players, ...this.gameState.bombs];

    const playerThreats = this.gameState.players.filter(player => {
      if (player.id === myPlayer.id) return false;

      const distance = this.calculateDistance(myPlayer, player);
      const deltaSize = player.size - myPlayer.size;

      // –ò–≥—Ä–æ–∫ –æ–ø–∞—Å–µ–Ω –µ—Å–ª–∏ –æ–Ω –±–æ–ª—å—à–µ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ
      return deltaSize > 2 && distance < this.settings.avoidDistance + myPlayer.size;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º —É–≥—Ä–æ–∑—ã –æ—Ç –±–æ–º–±
    // –ë–æ–º–±—ã –æ–ø–∞—Å–Ω—ã –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ
    const bombsThreats = this.gameState.bombs.filter(bomb => {
      const distance = this.calculateDistance(myPlayer, bomb);
      return distance < this.settings.avoidDistance + myPlayer.size;
    });
    return [...playerThreats, ...bombsThreats];
  }

  findOpportunities(myPlayer) {
    const opportunities = [];

    // –ò—â–µ–º –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ —Å—ä–µ—Å—Ç—å
    this.gameState.players.forEach(player => {
      if (player.id === myPlayer.id) return;

      const distance = this.calculateDistance(myPlayer, player);
      const deltaSize = myPlayer.size - player.size;
      const sizeRatio = myPlayer.size / player.size;

      // –ú–æ–∂–µ–º —Å—ä–µ—Å—Ç—å –µ—Å–ª–∏ –º—ã –±–æ–ª—å—à–µ
      if (deltaSize > 2 && distance < this.settings.attackDistance) {
        opportunities.push({
          ...player,
          priority: sizeRatio * (this.settings.attackDistance - distance) / this.settings.attackDistance,
          type: 'player'
        });
      }
    });

    // –ò—â–µ–º –µ–¥—É
    this.gameState.food.forEach(food => {
      const distance = this.calculateDistance(myPlayer, food);
      if (distance < 300) {
        opportunities.push({
          ...food,
          priority: (300 - distance) / 300,
          type: 'food'
        });
      }
    });

    return opportunities;
  }

  findNearestFood(myPlayer) {
    let nearest = null;
    let minDistance = Infinity;

    this.gameState.food.forEach(food => {
      const distance = this.calculateDistance(myPlayer, food);
      if (distance < minDistance) {
        minDistance = distance;
        nearest = food;
      }
    });

    return nearest;
  }

  selectBestOpportunity(myPlayer, opportunities) {
    // –ï—Å–ª–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è ‚Äî –≤—Å–µ–≥–¥–∞ –≤—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ–Ω—å—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    if (this.settings.aggressiveness === 100) {
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–∂–Ω–æ —Å—ä–µ—Å—Ç—å
      const ediblePlayers = opportunities.filter(o => o.type === 'player');
      if (ediblePlayers.length > 0) {
        // –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        return ediblePlayers.reduce((nearest, curr) => {
          const distCurr = this.calculateDistance(myPlayer, curr);
          const distNearest = this.calculateDistance(myPlayer, nearest);
          return distCurr < distNearest ? curr : nearest;
        }, ediblePlayers[0]);
      }
      // –ï—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ ‚Äî –≤—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é –µ–¥—É
      const food = opportunities.filter(o => o.type === 'food');
      if (food.length > 0) {
        return food.reduce((nearest, curr) => {
          const distCurr = this.calculateDistance(myPlayer, curr);
          const distNearest = this.calculateDistance(myPlayer, nearest);
          return distCurr < distNearest ? curr : nearest;
        }, food[0]);
      }
      // fallback
      return opportunities[0];
    }

    // –î–ª—è –¥—Ä—É–≥–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ ‚Äî —É—Å–∏–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–≥—Ä–æ–∫–æ–≤
    const aggressivenessFactor = this.settings.aggressiveness / 100;

    return opportunities.reduce((best, current) => {
      let currentScore = current.priority;

      // –ë–æ–Ω—É—Å –∑–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏
      if (current.type === 'player') {
        currentScore *= (1 + aggressivenessFactor * 2); // –£—Å–∏–ª–∏–≤–∞–µ–º –≤–ª–∏—è–Ω–∏–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç–∏
      }

      return currentScore > best.priority ? current : best;
    }, opportunities[0]);
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–µ–∫—Ç–æ—Ä–∞ –∏–∑–±–µ–≥–∞–Ω–∏—è —É–≥—Ä–æ–∑
  // –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–∫–∞ –∏ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –∏–∑–±–µ–≥–∞–Ω–∏—è
  calculateAvoidanceVector(myPlayer, threats) {
    let avoidX = 0;
    let avoidY = 0;

    threats.forEach(threat => {
      const dx = myPlayer.x - threat.x;
      const dy = myPlayer.y - threat.y;
      const distance = Math.sqrt(dx * dx + dy * dy);

      if (distance > myPlayer.size) {
        const strength = (this.settings.avoidDistance + myPlayer.size) / distance;
        avoidX += (dx / distance) * strength;
        avoidY += (dy / distance) * strength;
      }
    });

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä
    const length = Math.sqrt(avoidX * avoidX + avoidY * avoidY);
    if (length > 0) {
      avoidX /= length;
      avoidY /= length;
    }

    return { x: avoidX, y: avoidY };
  }

  calculateDirection(from, to) {
    const dx = to.x - from.x;
    const dy = to.y - from.y;
    const distance = Math.sqrt(dx * dx + dy * dy);

    if (distance === 0) return { x: 0, y: 0 };

    return {
      x: dx / distance,
      y: dy / distance
    };
  }

  calculateDistance(obj1, obj2) {
    const dx = obj1.x - obj2.x;
    const dy = obj1.y - obj2.y;
    return Math.sqrt(dx * dx + dy * dy);
  }

  sendMove(deltaX, deltaY) {

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∏–º–∏—Ç–∏—Ä—É—è –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à: -2, 0, +2
    const step = 2;

    // –û–∫—Ä—É–≥–ª—è–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —à–∞–≥–∞
    function quantizeDirection(value) {
      if (value > 0.5) return step;
      if (value < -0.5) return -step;
      return 0;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –µ–≥–æ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
    const changeCooldown = 80; // ms –º–µ–∂–¥—É —Å–º–µ–Ω–∞–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    if (!this.lastMoveChangeTime) this.lastMoveChangeTime = 0;
    const now = Date.now();

    let vx = this.lastMove.vx || 0;
    let vy = this.lastMove.vy || 0;
    const newVx = quantizeDirection(deltaX);
    const newVy = quantizeDirection(deltaY);

    // –ú–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
    if ((newVx !== vx || newVy !== vy) && (now - this.lastMoveChangeTime > changeCooldown)) {
      vx = newVx;
      vy = newVy;
      this.lastMoveChangeTime = now;
    }

    this.lastMove = { vx, vy };

    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
    const moveData = {
      type: 'move',
      vx: vx,
      vy: vy,
      x: vx,
      y: vy
    };

    try {
      window.postMessage({ type: "WS_SEND", payload: JSON.stringify(moveData) }, "*");
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–≤–∏–∂–µ–Ω–∏—è:', error);
    }
  }

  start(settings) {
    this.settings = { ...this.settings, ...settings };
    this.isActive = true;

    if (window.SOCKET) {
      debugger
      this.currentUserId = window.SOCKET.url.match(/id=(\d+)/)[1];
      this.gameWebSocket = window.SOCKET;
      window.SOCKET.addEventListener('message', this.handleWebSocketMessage);
      console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π WebSocket:', this.gameWebSocket);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
    this.decisionInterval = setInterval(() => {
      this.makeDecision();
    }, 50); // 20 —Ä–∞–∑ –≤ —Å–µ–∫—É–Ω–¥—É

    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:', this.settings);
  }

  stop() {
    this.isActive = false;
    if (window.SOCKET) {
      window.SOCKET.removeEventListener('message', this.handleWebSocketMessage);
      this.gameWebSocket = null;
      console.log('–û—Ç–∫–ª—é—á–∞–µ–º WebSocket:', window.SOCKET);
    }
    if (this.decisionInterval) {
      clearInterval(this.decisionInterval);
      this.decisionInterval = null;
    }
    console.log('–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }

  getStatus() {
    return {
      active: this.isActive,
      gameState: this.gameState,
      settings: this.settings
    };
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const eatAndRunBot = new EatAndRunBot();

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç popup
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  switch (request.action) {
    case 'start':
      eatAndRunBot.start(request.settings);
      sendResponse({ success: true });
      break;

    case 'stop':
      eatAndRunBot.stop();
      sendResponse({ success: true });
      break;

    case 'getStatus':
      sendResponse(eatAndRunBot.getStatus());
      break;

    default:
      sendResponse({ success: false, error: 'Unknown action' });
  }
});

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
window.addEventListener('beforeunload', () => {
  eatAndRunBot.stop();
});
