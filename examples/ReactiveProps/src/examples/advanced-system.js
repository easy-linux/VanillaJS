import { createReactive } from "../utils/reactiveProxy";
import { Reactive, ComputedReactive } from "../utils/reactiveClassAdvanced";

// Todo –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

// –ö–ª–∞—Å—Å Todo
class Todo {
  constructor(id, text, completed = false) {
    this.id = id;
    this.text = text;
    this.completed = completed;
    this.createdAt = new Date();
  }
}

const createReactiveTodo = ({ id, text, completed }, onChange) => {
  return createReactive(new Todo(id ?? Date.now(), text, completed), onChange);
};

// –†–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const todos = new Reactive([]);
const filter = new Reactive("all"); // all, active, completed
const newTodoText = new Reactive("");

// –í—ã—á–∏—Å–ª—è–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
const filteredTodos = new ComputedReactive(() => {
  switch (filter.value) {
    case "active":
      return todos.value.filter((todo) => !todo.completed);
    case "completed":
      return todos.value.filter((todo) => todo.completed);
    default:
      return todos.value;
  }
}, [todos, filter]);

const stats = new ComputedReactive(() => {
  const total = todos.value.length;
  const completed = todos.value.filter((todo) => todo.completed).length;
  const active = total - completed;
  const percentCompleted = total > 0 ? Math.round((completed / total) * 100) : 0;

  return { total, completed, active, percentCompleted };
}, [todos]);

const onProxyChange = ({ prop, newValue, oldValue, operation = "set" }, obj) => {
  logChange("Todo", `–ó–∞–¥–∞—á–∞ "${obj.text}" property "${prop}" –∏–∑–º–µ–Ω–µ–Ω–æ —Å "${oldValue}" –Ω–∞ "${newValue}"`);
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Todo
function addTodo() {
  const text = newTodoText.value.trim();
  if (text) {
    const newTodo = createReactiveTodo({ text, completed: false }, onProxyChange);

    todos.value = [...todos.value, newTodo];
    newTodoText.value = "";
    logChange("Todo", `–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: "${text}"`);
  }
}

function toggleTodo(id) {
  const todo = todos.value.find((t) => t.id === id);
  if (todo) {
    todo.completed = !todo.completed;
    logChange("Todo", `–ó–∞–¥–∞—á–∞ "${todo.text}" ${todo.completed ? "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞" : "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"}`);
    rerenderTodo(id);
    todos.value = [...todos.value]; // –¢—Ä–∏–≥–≥–µ—Ä–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã—Ö –≤—ã—á–∏—Å–ª—è–µ–º—ã—Ö —Å–≤–æ–π—Å—Ç–≤
  }
}

function deleteTodo(id) {
  const todo = todos.value.find((t) => t.id === id);
  todos.value = todos.value.filter((todo) => todo.id !== id);
  logChange("Todo", `–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: "${todo.text}"`);
}

function clearCompleted() {
  const completedCount = todos.value.filter((todo) => todo.completed).length;
  todos.value = todos.value.filter((todo) => !todo.completed);
  logChange("Todo", `–£–¥–∞–ª–µ–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${completedCount}`);
}

function setFilter(newFilter) {
  filter.value = newFilter;
  logChange("Filter", `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä: ${newFilter}`);
}

function createTodoHtml(todo) {
  const todoItem = document.createElement("div");
    todoItem.className = `todo-item ${todo.completed ? "completed" : ""}`;
    todoItem.setAttribute("data-todo-item", todo.id);
    todoItem.innerHTML = `
      <input type="checkbox" name="todo-checkbod=${todo.id}" ${todo.completed ? "checked" : ""} 
             data-todo-id="${todo.id}">
      <span class="todo-text">${todo.text}</span>
      <button class="replace-btn" data-todo-id="${todo.id}">üîÇ</button>
      <button class="delete-btn" data-todo-id="${todo.id}">√ó</button>
    `;
    return todoItem;
}

function rerenderTodo(id) {
  const todo = todos.value.find((t) => t.id === id);
  if (todo) {
    const todoElement = document.querySelector(`.todo-item[data-todo-item='${id}']`);
    if (todoElement) {
      const newTodoElement = createTodoHtml(todo);
      todoElement.replaceWith(newTodoElement);
    }
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function renderTodos() {
  const todoList = document.getElementById("todoList");
  todoList.innerHTML = "";

  filteredTodos.value.forEach((todo) => {
    const todoItem = createTodoHtml(todo);
    todoList.appendChild(todoItem);
  });
}

function renderStats() {
  const statsDisplay = document.getElementById("statsDisplay");
  const { total, completed, active, percentCompleted } = stats.value;

  statsDisplay.innerHTML = `
    <div class="stat-item">
      <span class="stat-label">–í—Å–µ–≥–æ:</span>
      <span class="stat-value">${total}</span>
    </div>
    <div class="stat-item">
      <span class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö:</span>
      <span class="stat-value">${active}</span>
    </div>
    <div class="stat-item">
      <span class="stat-label">–í—ã–ø–æ–ª–Ω–µ–Ω–æ:</span>
      <span class="stat-value">${completed}</span>
    </div>
    <div class="stat-item">
      <span class="stat-label">–ü—Ä–æ–≥—Ä–µ—Å—Å:</span>
      <span class="stat-value">${percentCompleted}%</span>
    </div>
  `;
}

function updateNewTodoInput() {
  const input = document.getElementById("newTodoInput");
  input.value = newTodoText.value;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function subscribeHandlers() {
  // –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
  filteredTodos.subscribe(({oldValue, newValue}) => {
    logChange("filteredTodos", `Changed list`);
    renderTodos();
  });

  stats.subscribe(({oldValue, newValue}) => {
    logChange("stats", `Changed stats`);
    renderStats();
  });

  newTodoText.subscribe(({oldValue, newValue}) => {
    logChange("newTodoText", `Changed ${oldValue} -> ${newValue}`);
    updateNewTodoInput();
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π DOM
  const newTodoInput = document.getElementById("newTodoInput");
  const addTodoBtn = document.querySelector(".input-group .btn");
  const filterButtons = document.querySelector(".filter-buttons");

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  newTodoInput.addEventListener("keypress", (event) => {
    if (event.key === "Enter") {
      addTodo();
    }
  });

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞ —Å —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–º —Å–≤–æ–π—Å—Ç–≤–æ–º
  newTodoInput.addEventListener("input", (event) => {
    newTodoText.value = event.target.value;
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
  addTodoBtn.addEventListener("click", addTodo);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ñ–∏–ª—å—Ç—Ä–∞ –∏ –¥–µ–π—Å—Ç–≤–∏–π
  filterButtons.addEventListener("click", (event) => {
    const action = event.target.dataset.action;
    const filter = event.target.dataset.filter;

    if (action === "addTodo") {
      addTodo();
    } else if (action === "setFilter") {
      setFilter(filter);
      // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
      const allButtons = filterButtons.querySelectorAll(".filter-btn");
      allButtons.forEach((btn) => btn.classList.remove("active"));
      event.target.classList.add("active");
    } else if (action === "clearCompleted") {
      clearCompleted();
    }
  });

  // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  document.addEventListener("click", (event) => {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤ –∑–∞–¥–∞—á
    if (event.target.type === "checkbox" && event.target.closest(".todo-item")) {
      const todoId = parseInt(event.target.getAttribute("data-todo-id"));
      toggleTodo(todoId);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
    if (event.target.classList.contains("delete-btn")) {
      const todoId = parseInt(event.target.getAttribute("data-todo-id"));
      deleteTodo(todoId);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑–∞–º–µ–Ω—ã
    if (event.target.classList.contains("replace-btn")) {
      const todoId = parseInt(event.target.getAttribute("data-todo-id"));
      const todo = todos.value.find((t) => t.id === todoId);
      if (todo) {
        const idx = todos.value.indexOf(todo);
        const text = newTodoText.value.trim();
        if (text) {
          const newTodo = createReactiveTodo({ text, completed: todo.completed }, onProxyChange);
          todos.value[idx] = newTodo;
        }
      }
    }
  });
}

function logChange(source, message) {
  const log = document.getElementById("log");
  const timestamp = new Date().toLocaleTimeString();
  const logEntry = document.createElement("div");
  logEntry.innerHTML = `<strong>${timestamp}</strong> [${source}]: ${message}`;
  log.insertBefore(logEntry, log.firstChild);

  if (log.children.length > 10) {
    log.removeChild(log.lastChild);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener("DOMContentLoaded", () => {
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–¥–∞—á
  const initialTodos = [
    createReactiveTodo({ id: 1, text: "–ò–∑—É—á–∏—Ç—å —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ JavaScript", completed: true }, onProxyChange),
    createReactiveTodo({ id: 2, text: "–°–æ–∑–¥–∞—Ç—å –¥–µ–º–æ-–ø—Ä–æ–µ–∫—Ç", completed: false }, onProxyChange),
    createReactiveTodo({ id: 3, text: "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é", completed: false }, onProxyChange),
  ];

  todos.value = initialTodos;

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  subscribeHandlers();

  renderTodos();
  renderStats();

  logChange("System", "Todo –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ");
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export {
  Reactive,
  ComputedReactive,
  Todo,
  todos,
  filter,
  newTodoText,
  filteredTodos,
  stats,
  addTodo,
  toggleTodo,
  deleteTodo,
  clearCompleted,
  setFilter,
  logChange,
};

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∞
import code from "./advanced-system?raw";
document.querySelector("#codeDisplay").textContent = code;
